{
  "0x0804c717": "| 0x0804c717      sub esp, 8\n| 0x0804c71a      push dword [arg_ch]\n| 0x0804c71d      push dword [arg_8h]\n| 0x0804c720      call sym.te_eval\n| 0x0804c725      add esp, 0x10\n| 0x0804c728      fstp qword [ebp - 0x10]\n| 0x0804c72b      sub esp, 8\n| 0x0804c72e      push dword [arg_ch]\n| 0x0804c731      push dword [arg_8h]\n| 0x0804c734      call sym.te_free_parameters\n| 0x0804c739      add esp, 0x10\n| 0x0804c73c      mov eax, dword [arg_ch]\n| 0x0804c73f      mov dword [eax], 1\n| 0x0804c745      mov eax, dword [arg_ch]\n| 0x0804c748      fld qword [ebp - 0x10]\n| 0x0804c74b      fstp qword [eax + 4]\n| 0x0804c74e      jmp 0x804c754\n", 
  "0x0804c6b2": "| 0x0804c6b2      mov eax, dword [arg_ch]\n| 0x0804c6b5      mov eax, dword [eax]\n| 0x0804c6b7      and eax, 7\n| 0x0804c6ba      jmp 0x804c6c1\n", 
  "0x0804c696": "| 0x0804c696      mov eax, dword [arg_ch]\n| 0x0804c699      mov eax, dword [eax]\n| 0x0804c69b      and eax, 0x20\n| 0x0804c69e      test eax, eax\n| 0x0804c6a0      je 0x804c754\n", 
  "0x0804c705": "| 0x0804c705      add dword [local_18h], 1\n", 
  "0x0804c711": "| 0x0804c711      cmp dword [local_1ch], 0\n| 0x0804c715      je 0x804c754\n", 
  "0x0804c6d4": "| 0x0804c6d4      mov eax, dword [arg_ch]\n| 0x0804c6d7      mov edx, dword [local_18h]\n| 0x0804c6da      mov eax, dword [eax + edx*4 + 0xc]\n| 0x0804c6de      sub esp, 8\n| 0x0804c6e1      push eax\n| 0x0804c6e2      push dword [arg_8h]\n| 0x0804c6e5      call sym.optimize\n| 0x0804c6ea      add esp, 0x10\n| 0x0804c6ed      mov eax, dword [arg_ch]\n| 0x0804c6f0      mov edx, dword [local_18h]\n| 0x0804c6f3      mov eax, dword [eax + edx*4 + 0xc]\n| 0x0804c6f7      mov eax, dword [eax]\n| 0x0804c6f9      cmp eax, 1\n| 0x0804c6fc      je 0x804c705\n", 
  "0x0804c689": "| 0x0804c689      mov eax, dword [arg_ch]\n| 0x0804c68c      mov eax, dword [eax]\n| 0x0804c68e      test eax, eax\n| 0x0804c690      je 0x804c753\n", 
  "0x0804c709": "| 0x0804c709      mov eax, dword [local_18h]\n| 0x0804c70c      cmp eax, dword [local_14h]\n| 0x0804c70f      jl 0x804c6d4\n", 
  "0x0804c6fe": "| 0x0804c6fe      mov dword [local_1ch], 0\n", 
  "0x0804c750": "| 0x0804c750      nop\n| 0x0804c751      jmp 0x804c754\n", 
  "0x0804c6a6": "| 0x0804c6a6      mov eax, dword [arg_ch]\n| 0x0804c6a9      mov eax, dword [eax]\n| 0x0804c6ab      and eax, 0x18\n| 0x0804c6ae      test eax, eax\n| 0x0804c6b0      je 0x804c6bc\n", 
  "0x0804c675": "/ (fcn) sym.optimize 225\n|   sym.optimize (int arg_8h, int arg_ch);\n| ; var int local_1ch @ ebp-0x1c\n| ; var int local_18h @ ebp-0x18\n| ; var int local_14h @ ebp-0x14\n| ; arg int arg_8h @ ebp+0x8\n| ; arg int arg_ch @ ebp+0xc\n| 0x0804c675      push ebp\n| 0x0804c676      mov ebp, esp\n| 0x0804c678      sub esp, 0x28\n| 0x0804c67b      mov eax, dword [arg_ch]\n| 0x0804c67e      mov eax, dword [eax]\n| 0x0804c680      cmp eax, 1\n| 0x0804c683      je 0x804c750\n", 
  "0x0804c6c1": "| 0x0804c6c1      mov dword [local_14h], eax\n| 0x0804c6c4      mov dword [local_1ch], 1\n| 0x0804c6cb      mov dword [local_18h], 0\n| 0x0804c6d2      jmp 0x804c709\n", 
  "0x0804c6bc": "| 0x0804c6bc      mov eax, 0\n", 
  "0x0804c753": "| 0x0804c753      nop\n", 
  "0x0804c754": "| 0x0804c754      leave\n\\\\ 0x0804c755      ret\n"
}