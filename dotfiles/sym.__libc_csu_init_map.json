{
  "0x0804ce88": "| 0x0804ce88      sub esp, 4\n| 0x0804ce8b      push dword [arg_2ch]\n| 0x0804ce8f      push dword [arg_2ch]\n| 0x0804ce93      push ebp\n| 0x0804ce94      call dword [ebx + edi*4 - 0x100]\n| 0x0804ce9b      add edi, 1\n| 0x0804ce9e      add esp, 0x10\n| 0x0804cea1      cmp edi, esi\n| 0x0804cea3      jne 0x804ce88\n", 
  "0x0804ce80": "| 0x0804ce80      xor edi, edi\n| 0x0804ce82      lea esi, dword [esi]\n", 
  "0x0804cea5": "| 0x0804cea5      add esp, 0xc\n| 0x0804cea8      pop ebx\n| 0x0804cea9      pop esi\n| 0x0804ceaa      pop edi\n| 0x0804ceab      pop ebp\n\\\\ 0x0804ceac      ret\n", 
  "0x0804ce50": "/ (fcn) sym.__libc_csu_init 93\n|   sym.__libc_csu_init (int arg_20h, int arg_2ch);\n| ; arg int arg_20h @ esp+0x20\n| ; arg int arg_2ch @ esp+0x2c\n| 0x0804ce50      push ebp\n| 0x0804ce51      push edi\n| 0x0804ce52      push esi\n| 0x0804ce53      push ebx\n| 0x0804ce54      call sym.__x86.get_pc_thunk.bx\n| 0x0804ce59      add ebx, 0x21a7\n| 0x0804ce5f      sub esp, 0xc\n| 0x0804ce62      mov ebp, dword [arg_20h]\n| 0x0804ce66      lea esi, dword [ebx - 0xfc]\n| 0x0804ce6c      call sym._init\n| 0x0804ce71      lea eax, dword [ebx - 0x100]\n| 0x0804ce77      sub esi, eax\n| 0x0804ce79      sar esi, 2\n| 0x0804ce7c      test esi, esi\n| 0x0804ce7e      je 0x804cea5\n"
}